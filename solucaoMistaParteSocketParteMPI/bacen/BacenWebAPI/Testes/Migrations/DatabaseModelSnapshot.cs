// <auto-generated />
using System;
using Domain.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(Database))]
    partial class DatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Domain.Atividades.Atividade", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtividadeCriterioid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("atividadeCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("atividadeDataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<string>("atividadeDescricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("atividadeIndicador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("atividadePontos")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("AtividadeCriterioid");

                    b.ToTable("atividade");
                });

            modelBuilder.Entity("Domain.Domain.Atividades.Criterio", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("criterioCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("criterioDimensaoid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("criterioNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("criterioDimensaoid");

                    b.ToTable("criterio");
                });

            modelBuilder.Entity("Domain.Domain.Atividades.DeclaracaoAtividade", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("atividadeid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("comissaoPontos")
                        .HasColumnType("real");

                    b.Property<DateTime>("dataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<string>("observacoes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("professorPontos")
                        .HasColumnType("real");

                    b.Property<Guid>("professorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("tituloDeclaracao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("atividadeid");

                    b.HasIndex("professorid");

                    b.ToTable("declaracaoAtividade");
                });

            modelBuilder.Entity("Domain.Domain.Atividades.Dimensao", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("dimensaoCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dimensaoNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("dimensao");
                });

            modelBuilder.Entity("Domain.Domain.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("departamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("login")
                        .IsUnique();

                    b.HasIndex("nome");

                    b.HasIndex("senha");

                    b.ToTable("usuario", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Domain.Usuarios.AdminSistema", b =>
                {
                    b.HasBaseType("Domain.Domain.Usuarios.Usuario");

                    b.Property<string>("tokenEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("adminSistema", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.Usuarios.Professor", b =>
                {
                    b.HasBaseType("Domain.Domain.Usuarios.Usuario");

                    b.Property<DateTime>("dataAdmissao")
                        .HasColumnType("datetime2");

                    b.ToTable("professor", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.Atividades.Atividade", b =>
                {
                    b.HasOne("Domain.Domain.Atividades.Criterio", "AtividadeCriterio")
                        .WithMany("criterioAtividades")
                        .HasForeignKey("AtividadeCriterioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Domain.Atividades.StatusAtividade", "atividadeStatus", b1 =>
                        {
                            b1.Property<Guid>("Atividadeid")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Atividadeid");

                            b1.ToTable("atividade");

                            b1.WithOwner()
                                .HasForeignKey("Atividadeid");
                        });

                    b.Navigation("AtividadeCriterio");

                    b.Navigation("atividadeStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Atividades.Criterio", b =>
                {
                    b.HasOne("Domain.Domain.Atividades.Dimensao", "criterioDimensao")
                        .WithMany("dimensaoCriterios")
                        .HasForeignKey("criterioDimensaoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("criterioDimensao");
                });

            modelBuilder.Entity("Domain.Domain.Atividades.DeclaracaoAtividade", b =>
                {
                    b.HasOne("Domain.Domain.Atividades.Atividade", "atividade")
                        .WithMany()
                        .HasForeignKey("atividadeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Usuarios.Professor", "professor")
                        .WithMany("declaracoes")
                        .HasForeignKey("professorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Domain.Atividades.StatusDeclaracao", "statusDeclaracao", b1 =>
                        {
                            b1.Property<Guid>("DeclaracaoAtividadeid")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DeclaracaoAtividadeid");

                            b1.ToTable("declaracaoAtividade");

                            b1.WithOwner()
                                .HasForeignKey("DeclaracaoAtividadeid");
                        });

                    b.OwnsMany("Domain.Domain.Atividades.DocumentoComprobatorio", "documentosComprobatorios", b1 =>
                        {
                            b1.Property<Guid>("declaracaoAtividadeid")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("fileName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("hashName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("declaracaoAtividadeid", "Id");

                            b1.ToTable("documentoComprobatorio");

                            b1.WithOwner("declaracaoAtividade")
                                .HasForeignKey("declaracaoAtividadeid");

                            b1.Navigation("declaracaoAtividade");
                        });

                    b.Navigation("atividade");

                    b.Navigation("documentosComprobatorios");

                    b.Navigation("professor");

                    b.Navigation("statusDeclaracao")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Usuarios.Usuario", b =>
                {
                    b.OwnsMany("Domain.Domain.Usuarios.Papel", "papeis", b1 =>
                        {
                            b1.Property<Guid>("Usuarioid")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("valor")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Usuarioid", "Id");

                            b1.ToTable("papel");

                            b1.WithOwner()
                                .HasForeignKey("Usuarioid");
                        });

                    b.OwnsOne("Domain.Domain.Usuarios.UsuarioStatus", "usuarioStatus", b1 =>
                        {
                            b1.Property<Guid>("Usuarioid")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("statusEnum")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Usuarioid");

                            b1.ToTable("usuario");

                            b1.WithOwner()
                                .HasForeignKey("Usuarioid");
                        });

                    b.Navigation("papeis");

                    b.Navigation("usuarioStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Usuarios.AdminSistema", b =>
                {
                    b.HasOne("Domain.Domain.Usuarios.Usuario", null)
                        .WithOne()
                        .HasForeignKey("Domain.Domain.Usuarios.AdminSistema", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Usuarios.Professor", b =>
                {
                    b.HasOne("Domain.Domain.Usuarios.Usuario", null)
                        .WithOne()
                        .HasForeignKey("Domain.Domain.Usuarios.Professor", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Domain.Usuarios.Hierarquia", "hierarquia", b1 =>
                        {
                            b1.Property<Guid>("Professorid")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("categoria")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("nivel")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Professorid");

                            b1.ToTable("hierarquia");

                            b1.WithOwner()
                                .HasForeignKey("Professorid");
                        });

                    b.OwnsOne("Domain.Domain.Usuarios.Pontuacao", "pontuacao", b1 =>
                        {
                            b1.Property<Guid>("Professorid")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("dimensao1")
                                .HasColumnType("real");

                            b1.Property<float>("dimensao2")
                                .HasColumnType("real");

                            b1.Property<float>("dimensao3")
                                .HasColumnType("real");

                            b1.HasKey("Professorid");

                            b1.ToTable("pontuacao");

                            b1.WithOwner()
                                .HasForeignKey("Professorid");
                        });

                    b.Navigation("hierarquia")
                        .IsRequired();

                    b.Navigation("pontuacao")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Atividades.Criterio", b =>
                {
                    b.Navigation("criterioAtividades");
                });

            modelBuilder.Entity("Domain.Domain.Atividades.Dimensao", b =>
                {
                    b.Navigation("dimensaoCriterios");
                });

            modelBuilder.Entity("Domain.Domain.Usuarios.Professor", b =>
                {
                    b.Navigation("declaracoes");
                });
#pragma warning restore 612, 618
        }
    }
}
